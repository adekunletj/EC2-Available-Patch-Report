AWSTemplateFormatVersion: 2010-09-09
Description: >
  AWS Lambda scheduled by Cloud Watch events, fetch the list of missing patches from EC2 instances
  Based on the tag specified and sends the patch list to the SNS Topic

Parameters:
  LambdaRate:
    Description: >
      The rate (frequency) that determines when CloudWatch Events runs the rule that
      triggers the Lambda function.
    Default: rate(2 minutes)
    Type: String
  SNSTopicArn:
    Description: The existing SNS topic ARN used for notifications
    Type: String
    Default: arn:aws:sns:us-east-1:237243789465:patch-notifications
  TagKey:
    Description: Tag Key to getch the patches from the EC2 Instance
    Type: String
    Default: PatchGroup
  TagValue:
    Description: Tag Key to getch the patches from the EC2 Instance
    Type: String
    Default: Auto
Resources:
  PathReportLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: AutomationServiceRole
      Policies:
      - PolicyName: PatchReportLambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeInstances
                - ssm:DescribeInstancePatches
                - sns:Publish
              Resource: '*'
  LambdaSchedule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: >
        A schedule for the Lambda function..
      ScheduleExpression: !Ref LambdaRate
      State: ENABLED
      Targets:
        - Arn: !Sub ${PatchReportLambdaFunction.Arn}
          Id: LambdaSchedule
  LambdaSchedulePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub ${PatchReportLambdaFunction.Arn}
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${LambdaSchedule.Arn}
  PatchReportLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: >
        Lambda function that sends missing patch list to SNS
      Code:
        ZipFile: |
          import boto3
          import os
          import json

          def lambda_handler(event, context):
              TAG_KEY = os.getenv('TAG_KEY', 'PatchGroup')
              TAG_VALUE = os.getenv('TAG_VALUE', 'Auto')
              SNS_ARN = os.getenv('SNS_ARN', 'arn:aws:sns:us-east-1:237243789465:patch-notifications')

              ec2_client = boto3.client('ec2')
              ssm_client = boto3.client('ssm')
              sns_client = boto3.client('sns')

              instance_key_filter = [{'Name': 'tag:{}'.format(TAG_KEY), 'Values': [TAG_VALUE]}]
              response = ec2_client.describe_instances(Filters=instance_key_filter)

              ec2paginator = ec2_client.get_paginator('describe_instances')
              ec2_response_iterator = ec2paginator.paginate(Filters=instance_key_filter)

              instance_details = {}
              for ec2_response in ec2_response_iterator:
                  for r in ec2_response['Reservations']:
                      for instance in r['Instances']:
                          instance_name = [i["Value"] for i in instance["Tags"] if i["Key"]=="Name"]
                          instance_details[instance['InstanceId']] = instance_name[0] if instance_name else ""

              print("Fetched instance ids for path reports: {} ".format(instance_details))
              paginator = ssm_client.get_paginator('describe_instance_patches')

              patch_report = list()
              for instance_id in instance_details:
                  response_iterator = paginator.paginate(InstanceId=instance_id)
                  instance_pathces = list()
                  for r in response_iterator:
                      for patch in r['Patches']:
                          patch_d = dict()
                          if patch['State'] == "Missing":
                              patch_d["InstanceID"] = instance_id
                              patch_d["InstanceName"] = instance_details.get(instance_id)
                              patch_d["Name"] = patch["Title"]
                              patch_d["State"] = patch["State"]
                              patch_d["Severity"] = patch["Severity"]
                              patch_d["KBId"] = patch["KBId"]
                              instance_pathces.append(patch_d)
                  patch_report.extend(instance_pathces)

              message = json.dumps(patch_report, indent=2, default=str)
              print(message)
              sns_response = sns_client.publish(TargetArn=SNS_ARN, Message=message )
              response = {"statusCode": 200, "body": message}
              return response
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !Sub ${PathReportLambdaExecutionRole.Arn}
      Runtime: python3.8
      Timeout: 120
      Environment:
        Variables:
          TAG_KEY: !Ref TagKey
          TAG_VALUE: !Ref TagValue
          SNS_ARN: !Ref SNSTopicArn
